#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`

# Load vars
[ -s $BUILD_DIR/Edgejs ] && . $BUILD_DIR/Edgejs

# Override HOME environment
export HOME_APP=$HOME
export HOME=$BUILD_DIR

# Force APT_OPTIONS to override default values
APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"
APT_OPTIONS="-o debug::nolocking=true -o dir::state=$APT_STATE_DIR"
APT_OPTIONS="$APT_OPTIONS -o Dir::Etc::SourceList=$LP_DIR/conf/sources.list"
APT_OPTIONS="$APT_OPTIONS -o Dir::Etc::Trusted=$BUILD_DIR/temp/trusted.gpg"
APT_OPTIONS="$APT_OPTIONS -o Dir::Etc::Preferences=$LP_DIR/conf/preferences"
APT_OPTIONS="$APT_OPTIONS -o dir::cache=$APT_CACHE_DIR"

function error() {
    echo " !     $*" >&2
    exit 1
}


function topic() {
    echo "-----> $*"
}

function indent() {
    c='s/^/       /'
    case $(uname) in
        Darwin) sed -l "$c";;
        *)      sed -u "$c";;
    esac
}


function create_dirs(){
    mkdir -p "$BUILD_DIR/.apt"
    mkdir -p "$BUILD_DIR/temp"
    mkdir -p "$CACHE_DIR/dirs"
    mkdir -p "$APT_CACHE_DIR/archives/partial"
    mkdir -p "$APT_STATE_DIR/lists/partial"
    mkdir -p "$BUILD_DIR/.profile.d"
}



function install_apt(){
    APTFILE=$1
  
    for PACKAGE in $(cat ${APTFILE}); do
        if [[ $PACKAGE == *deb ]]; then
            PACKAGE_NAME=$(basename $PACKAGE .deb)
            PACKAGE_FILE=$APT_CACHE_DIR/archives/00_$PACKAGE_NAME.deb
      
            topic "Fetching $PACKAGE"
            curl -s -L -z $PACKAGE_FILE -o $PACKAGE_FILE $PACKAGE 2>&1 | indent
        else
            topic "Fetching .debs for $PACKAGE"
            apt-get $APT_OPTIONS -y --force-yes -d install $PACKAGE --reinstall | indent
        fi
    done
   
    for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
        topic "Installing $(basename $DEB)"
        # Check if packages must be placed in temp dir
        if [[ $APTFILE =~ Apttemp ]]; then
            dpkg -x $DEB $BUILD_DIR/temp/
        else
            dpkg -x $DEB $BUILD_DIR/.apt/
        fi
    done
  
    rm -rf $APT_CACHE_DIR/archives/*.deb
}



# Main
function main() {
    set -eux && \
  sed -i "s/..\/lib\/edge/edge/g" /data/samples/*.js && \
  \
  echo "deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/ trusty main" > /etc/apt/sources.list.d/dotnetdev.list && \
  apt-key adv --keyserver apt-mo.trafficmanager.net --recv-keys 417A0893 && \
  apt-get -y update && \
  apt-get -y install dotnet-dev-1.0.0-preview2-003121 && \
  \
  apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF && \
  echo "deb http://download.mono-project.com/repo/debian wheezy/snapshots/4.2.4 main" | tee /etc/apt/sources.list.d/mono-xamarin.list && \
  apt-get -y update && \
  apt-get -y install curl g++ pkg-config libgdiplus libunwind8 libssl-dev make mono-complete gettext libssl-dev libcurl4-openssl-dev zlib1g libicu-dev uuid-dev unzip && \
  \
  npm i tjanczuk/edge && \
  npm cache clean
}

main
